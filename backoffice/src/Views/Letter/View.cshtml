@model LetterView

@{
    var title = "Preview Letter";

    if (!string.IsNullOrEmpty(Model.Droit?.Reference))
    {
        title += $" - Droit {Model.Droit.Reference}";
    }
        
    ViewData["Title"] = title;
}

@{
    await Html.RenderPartialAsync("_MessageBanner");
}


<div class="row">
    <div class="col-6 col-lg-8">
        <h4>@ViewData["Title"]</h4>
    </div>
</div>

<ul class="nav nav-tabs" id="letterTabs" role="tablist">
    <li class="nav-item" role="presentation">
        <button class="nav-link active" id="letter-tab" data-bs-toggle="tab" data-bs-target="#letter-content" type="button" role="tab" aria-controls="letter-content" aria-selected="true">Letter</button>
    </li>
    <li class="nav-item" role="presentation">
        <button class="nav-link" id="droit-tab" data-bs-toggle="tab" data-bs-target="#droit-content" type="button" role="tab" aria-controls="droit-content" aria-selected="false">Droit</button>
    </li>
    <li class="nav-item" role="presentation">
        <button class="nav-link" id="notes-tab" data-bs-toggle="tab" data-bs-target="#notes-content" type="button" role="tab" aria-controls="notes-content" aria-selected="false">Notes</button>
    </li>
</ul>

<div class="tab-content mt-3" id="letterView">
    <div class="tab-pane fade show active" id="letter-content" role="tabpanel" aria-labelledby="letter-tab">
        <table class="table">
            <tbody>
            <tr>
                <th scope="row">From</th>
                <td>Report Wreck Material</td>
            </tr>
            <tr>
                <th scope="row">Reply to</th>
                <td>row@mcga.gov.uk</td>
            </tr>
            <tr>
                <th scope="row">To</th>
                <td>
                    @Html.DisplayFor(m => m.Recipient,
                        new { htmlAttributes = new { @class = "readonly-input", @readonly = "readonly" } })
                </td>
            </tr>
        
            <tr>
                <th scope="row">Subject</th>
                <td>
                    @Html.DisplayFor(m => m.Subject,
                        new { htmlAttributes = new { @class = "readonly-input", @readonly = "readonly" } })
                </td>
            </tr>
            <tr>
                <td colspan="2">
                    @{
                        await Html.RenderPartialAsync("_GovNotifyText", Model.Body);
                    }
        
                </td>
            </tr>
            <tr>
                <th scope="row">Status</th>
                <td>@Html.DisplayFor(m => m.Status)</td>
            </tr>
            <tr>
                <th scope="row">QC Approved By</th>
                <td>@Html.DisplayFor(m => m.QualityApprovedUser)</td>
            </tr>
            <tr>
                <th scope="row">Created</th>
                <td>@Html.DisplayFor(m => m.Created)</td>
            </tr>
            <tr>
                <th scope="row">Last Modified</th>
                <td>@Html.DisplayFor(m => m.LastModified)</td>
            </tr>
            <tr>
                <th scope="row">Last Modified By</th>
                <td>@Html.DisplayFor(m => m.LastModifiedBy)</td>
            </tr>
        
            </tbody>
        </table>
    </div>

    
    <div class="tab-pane fade" id="droit-content" role="tabpanel" aria-labelledby="droit-tab">
        
        @if (@Model.Droit?.Reference == null)
        {
            <p>No Droit associated with this Letter</p>
        }
        else
        {
            <div class="form-group row m-1">
                <div class="col-md-3">
                    <label class="font-weight-bold">@Html.DisplayNameFor(m => m.Droit!.Reference)</label>
                </div>
                <div class="col-md-7">
                    @Html.DisplayFor(m => m.Droit!.Reference)
                </div>
            </div>
            
            <div class="col d-flex flex-row mt-4 justify-content-end">
                <div class="align-self-end">
                <a type="button" class="btn btn-primary" asp-controller="Droit" asp-action="View" asp-route-id="@Model.Droit.Id">View Droit</a>
                </div>
            </div>
        }
    </div>
    
    <div class="tab-pane fade" id="notes-content" role="tabpanel" aria-labelledby="notes-tab">
        <div class="row justify-content-end">
            <div class="col-6 col-lg-4 text-end">
                <a type="button" class="btn btn-primary" asp-controller="Note" asp-action="Add" asp-route-LetterId="@Model.Id" asp-route-ObjectReference="@Model.Subject">Add Note</a>
            </div>
        </div>

        <partial name="_NoteListTable" for="Notes"/>
    </div>
</div>

<div class="col d-flex flex-row mt-4 justify-content-end">
    <div class="align-self-end">
        <a type="button" class="btn btn-secondary" asp-action="Index">Cancel</a>
        <a type="button" class="btn btn-primary" asp-action="Edit" asp-route-id="@Model.Id">Edit</a>
        @if (Model.Status == LetterStatus.QcApproved)
        {
            <a type="button" class="btn btn-primary" asp-action="SendLetter" asp-route-id="@Model.Id">Send</a>
        }
        else
        {
            <a type="button" class="btn btn-info">Send</a>
        }
    </div>
</div>